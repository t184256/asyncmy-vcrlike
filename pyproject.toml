[project]
name = "asyncmy_vcrlike"
version = "0.0.1"
authors = [
  { name="Alexander Sosedkin", email="monk@unboiled.info" },
]
description = "Something like pyvcr and python-recording, but for recording SQL queries."
urls.homepage = "https://github.com/t184256/asyncmy-vcrlike"
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
]
requires-python = ">=3.11"
dependencies = [
  "asyncmy",
  "pytest", "pytest-recording",
  "ruamel.yaml",
] # TODO: list python dependencies
optional-dependencies.test = [
  "pytest-asyncio", "pytest-mysql",
  "aiohttp",
  "pytest",
  "coverage", "pytest-cov",
  "mypy", "pytest-mypy",
  "ruff",
]

[project.entry-points."pytest11"]
asyncmy_vcrlike = "asyncmy_vcrlike"

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.pytest.ini_options]
addopts = "--mypy --cov --cov-report term-missing --doctest-modules"
asyncio_mode = "auto"

[tool.coverage]
run.source = [ "asyncmy_vcrlike" ]
run.branch = true
report.exclude_lines = [
  "# pragma: no cover",
  "if __name__ == .__main__.:",
  "...  # overload",
]
report.fail_under = 100

[tool.mypy]
strict = true

[tool.ruff]
line-length = 79
preview = true
lint.select = [ "ALL" ]
lint.ignore = [
  "D105",  # undocumented-magic-method
  "D203",  # one-blank-line-before-class
  "D213",  # multi-line-summary-second-line
]
lint.per-file-ignores."tests/**" = [
  "INP001",  # implicit-namespace-package
  "S101",  # assert
]
lint.flake8-quotes.inline-quotes = "single"
lint.flake8-quotes.multiline-quotes = "single"
lint.flake8-copyright.notice-rgx = '# SPDX-FileCopyrightText: 2024 Alexander Sosedkin <monk@unboiled.info>\n# SPDX-License-Identifier: GPL-3.0\n'
format.quote-style = "single"
format.preview = true
